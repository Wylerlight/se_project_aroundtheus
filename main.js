!function(){"use strict";class e{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){this._errorElement=this._formElement.querySelector(`.${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorElement.textContent=e.validationMessage,this._errorElement.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class t{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this.close=this.close.bind(this),this.open=this.open.bind(this),this._modalExitButton=this._popupElement.querySelector(".modal__exit")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modalExitButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",this._overlayClickCloseListener)}_overlayClickCloseListener=e=>{e.target===e.currentTarget&&this.close(e.target)}}const o=document.querySelector(".profile__button-edit"),r=document.querySelector(".profile-container"),s=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),r.querySelector(".profile-input")),n=(document.querySelector(".cards"),document.querySelector(".card-modal").querySelector(".card-input")),i=s.querySelector("#modal-description-name"),l=s.querySelector("#modal-description-job"),a=document.querySelector(".profile__button-add"),u=(document.querySelector(".profile__avatar"),document.querySelector("#modal-description-title"),document.querySelector("#modal-description-url"),document.querySelector(".card-delete-container"),document.querySelector(".profile__avatar-edit"),document.querySelector(".avatar__modal")),c=(u.querySelector(".avatar__image-input"),u.querySelector("#modal-avatar-image-save"),u.querySelector("#modal-avatar-url"),{inputSelector:".modal__field",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__field_type_error",errorClass:"modal__error_visible"});new class extends t{constructor(e){super(e)}open(e){const t=this._popupElement.querySelector(".image__main"),o=this._popupElement.querySelector(".image__description");t.src=e.src,t.alt=e.alt,o.textContent=e.alt,super.open()}}(".image").setEventListeners();const d=new class{constructor(e){let{userNameSelector:t,userJobSelector:o}=e;this._userNameElement=document.querySelector(t),this._userJobElement=document.querySelector(o)}getUserInfo(){return{userName:this._userNameElement.textContent,userJobDescription:this._userJobElement.textContent}}setUserInfo(e){let{title:t,job:o}=e;this._userNameElement.textContent=t,this._userJobElement.textContent=o}}({userNameSelector:".profile__title",userJobSelector:".profile__description"});o.addEventListener("click",(()=>{const e=d.getUserInfo();i.value=e.userName,l.value=e.userJobDescription,_.toggleButtonState(),profilePopupForm.open()})),a.addEventListener("click",(()=>{m.toggleButtonState(),newCardPopupForm.open()})),newCardPopupForm.setEventListeners();const _=new e(c,s);_.enableValidation();const m=new e(c,n);m.enableValidation(),fetch("https://around.nomoreparties.co/v1/group-12/users/me",{headers:{authorization:"5e7676bf-611c-4ca9-9820-f740c8ee0732","Content-Type":"application/json"}}).then((e=>e.json())).then((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,